#include<stdio.h>
#include<stdlib.h>

struct queue {
    int size;
    int front;
    int rear;
    int *arr;
};

int is_full(struct queue *q){
    if((q->rear+1)%q->size==q->front){
        return 1;
    }
    return 0;
}

int is_empty(struct queue *q){
    if(q->front==q->rear){
        return 1;
    }
    return 0;
}

void enqueue(struct queue *q,int val){
    if (is_full(q)){
        printf("The Queue is full. Can't enqueue %d\n", val);
    }else{
        q->rear=(q->rear+1)%q->size;
        q->arr[q->rear]=val;
        printf("Enqueued element: %d\n", val);
    }
}

int dequeue(struct queue *q) {
    int a=-1;
    if (is_empty(q)){
        printf("The Queue is empty\n");
    } else{
        q->front=(q->front+1)%q->size;
        a =q->arr[q->front];
    }
    return a;
}

void display(struct queue *q) {
    if (is_empty(q)) {
        printf("The Queue is empty\n");
    }else{
        int i=(q->front+1)%q->size;
        printf("Queue elements are:");
        while(i!=(q->rear+1)%q->size){
            printf("%d\t",q->arr[i]);
            i=(i+1)%q->size;
        }
        printf("\n");
    }
}

int main() {
    struct queue *q=(struct queue *)malloc(sizeof(struct queue));
    q->size=5;
    q->front=q->rear = 0;
    q->arr=(int*)malloc(q->size *sizeof(int));

    enqueue(q, 12);
    enqueue(q, 15);
    enqueue(q, 1);
    enqueue(q, 100);
    display(q);

    printf("Dequeuing element: %d\n", dequeue(q));
    printf("Dequeuing element: %d\n", dequeue(q));
    printf("Dequeuing element: %d\n", dequeue(q));
    printf("Dequeuing element: %d\n", dequeue(q));
    printf("Dequeuing element: %d\n", dequeue(q));

    return 0;
}
